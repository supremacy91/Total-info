Интерфейсы:

1) Все методы по умолчанию абстрактные
2) Ключевое слово abstract в обьявлении методов указывать нел	ьзя - просто опускаем его
3) Можно обьявлять константы, но в наследниках перекрывать нельзя
4) Все методы могут быть только публичными, згидшс указывать не обязательно 

---------------------------------------------------------------------------------------------------------------------------------------------------

Абстрактные классы:

1) Могут содержать как абстрактные, атк и не абстрактные методы
2) Абстрактные методы должны быть обьявлены с ключевым словом abstract()
3) Спецификатор доступа абстрактного метода должен быть либо public либо protected
4) Если класс содержит хотябы один абстрактный метод - он должен быть обьявлен с ключевым словом abstract
5) Можно обьявить абстрактным класс, в котором нет вообще абстрактных методов - ошибки не будет. Но обьекты этого класса создать будет нельзя. Но можно создать обьекты его наследников, ничег ов них не переопределяя

---------------------------------------------------------------------------------------------------------------------------------------------------

Общие моменты:

1) __cunstruct() обьявляем только публичным, поскольку на месте его вызова будет к нему обращение с места вызова
2) __cunstruct() не может быть статическим - сразу ошибка
3) можно вызывать статические методы через обьект и через имя класса. Прчием через обьект можно и стрелочкой
	 $b::func() B::func() $b->func()
4) Можно вызывать нестатические методы через двоеточие $b::func() B::func(). 
Тогда будет Deprecated сообщение и функция удет вызвана в статическом контексте, изза чего в ней нельзя будет использовать $this. А также $this нельзя будет использовать в функциях, вызванных функцией статического контекста.
5) При обращении в методах к другим методам через self:: static:: parent:: CLASSNAME:: - вызываемые методы не удут вызваны в статическом контексте, и в них можно будет использовать $this
6) При наследовании спецификатор доступа может быть только ослаблен. 
7) Если мы не переопределили в наследнике свойство или метод - то обращаться  нему мы будем в контексте класса-предка.
class A {
    private function func() {
        var_dump($this->x) ;
    }

    public function func1() {
        self::func();
    }
}

class B extends A {
    public function func() {
        $this->func1();
    }
}

$b = new B();
$b->func();	

8)print_r(), var_dump() и var_export() могут также показывать защищенные (protected) и закрытые (private) атрибуты объектов. Статические элементы класса не будут отображены. 
9) var_dump()     =>  __debugInfo() 
   var_export()   =>  __set_state()
   echo ; print =>  __toString()

---------------------------------------------------------------------------------------------------------------------------------------------------

Общие моменты PHP:

Type hints: указание типа данных при передече в функцию. Нужно для того что бы при нессоотвествии типа вываливался эррор и скрипт останавливался. Если этого нет, то будет предупреждение и скрипт пойдет дальше со всеми последствиями
