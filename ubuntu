http://help.ubuntu.ru/wiki/%D1%81%D1%82%D0%B0%D0%BD%D0%B4%D0%B0%D1%80%D1%82%D0%BD%D1%8B%D0%B5_%D0%BF%D1%80%D0%B0%D0%B2%D0%B0_unix
http://www.linuxrussia.com/terminal-chmod-chown.html

Помимо владельца, можно настроить, что же может этот самый владелец и группа, а также все остальные. В Unix идёт разделение возможностей именно таким образом — есть 3 группы прав: владелец, группа владельцев и другие. И права, что можно присвоить каждой группе:

    Право на запуск файла. Оно же — право на проход по директории (если устанавливаем права на директории).
    Право на изменение файла. Оно же — право на создание и удаление файлов и папок в директории (опять же, если устанавливается для папки).
    И право на чтение файла. Для папок — это право на просмотр содержимого папки.

Кодируются эти права следующим образом: запуск — 1, изменение — 2, чтение — 4. Складывая их мы получим набор прав, предоставляемый владельцу/группе/другим. Права на доступ изменяются командой chmod. Примеры:

    Изменять файл имеет право только владелец, группа владельце может читать, остальные — ничего не могут: chmod 640 /media/share/file.txt
    Создавать файлы в папке могут все, но видит их только владелец: chmod 622 /media/share/messages/
    Есть программа, которая не хочет запускаться — не хватает прав на исполнение. Нужно, чтобы все могли её запустить, но никто, кроме владельца, не мог её редактировать: chmod 711 /media/share/exec

Для рекурсивного изменения прав используется опять же ключ «-R». Например, chmod -R 700 /home/user — доступ к файлам и папкам /home/user останется только у владельца. Стоит заметить, что изменять права на файлы и директории могут администраторы и владелец этих папок и файлов.


pkexec chmod 440 /etc/sudoers.d/README
pkexec chmod 755 /etc/sudoers.d

добавление юзера в группу www-data:
https://www.cyberciti.biz/faq/ubuntu-add-user-to-group-www-data/

---------------------------------------------------------------------------------------------------------------------

sudo su - меняет пользователя на root
если стоит $ в командной строке Linux - то мы под обычным пользователем. 
если стоит # в командной строке Linux - то мы под root

sudo vipw - выводит список пользователей 
sudo users - показывает текущего пользователя

sudo rm -R -d name -удаляет рекурсивно директорию с файлами
sudo rm -R -d name/* -удаляет рекурсивно файлы с директории

rm file - удалить файл
rm -R dir - удалить каталог
rm -r dir/* - удаляет всe рекурсивно из папки dir
rm -df dir/* - удаляет всe пустые папки b файлы из папки dir 
rm -d dir/* - удаляет всe пустые папки b файлы из папки dir 

cat file1 > file2 - копирует содержимое первого файла во второй. Если второго файла нет создает его.
cat > file2 - редактирует файл, запрашивая ввод содержимого с клавиатуры. Вводим содержимое и нажимаем Ctrl+D/Ctrl+C. Если файла нет - создает его

cp file1 file2 копирует содержимое первого файла во второй. Если второго файла нет создает его.

http://www.linuxcenter.ru/lib/books/kostromin/gl_04_06.phtml - крутой гайд по командам

Ключ -v покажет "комментарий", т.е. выведет на экран подтверждение действий 
например: rm -vR dir - удалить каталог 

gnome-screenshot - сделать скрин через командную строку
	
---------------------------------------------------------------------------------------------------------------------

mv file newfile - меняет имя файла file на newfile
mkdir ~/My_directory_name - создаст директорию My_directory_name в каталоге home
mkdir /My_directory_name - создаст директорию My_directory_name в каталоге Computer

создание файлов
touch "filename" -------создать пустой файл
cat > "filename" --------и ввод закончить ctrl+z
vim "filename" --------создать или редактировать "filename" 
nano filename
echo "текст" > filename

wget - закачивает файлы с сайта по его адресу. Если сайт на https - то тоже закачиввает (например: wget ftp://vasya.pupkin.com/film.avi)
scp - можно закачать любой файл по ssh, зная его директорию на сервере (например: scp user@domain:path_to_the_file .) - точка указывает текущую локальную директорию, которую нуно указывать обязательно

sudo gedit file - можно открыть file удобным редактором, если на него ограниченны права

---------------------------------------------------------------------------------------------------------------------

При работе с vim:

    :q - quit if no changes were made
    :q! - quit and destroy any changes made
    :wq - write changes (save) and quit
    :x - similar to :wq, only write the file if changes were made, then quit

предварительно нажать esc перед вводом команд

---------------------------------------------------------------------------------------------------------------------

Архиватор:

 Сжатие с помощью Gzip и Zip

По умолчанию, сжатые файлы получают расширение	.gz. Команда Gzip создаёт сжатый файл с расширением .gz; Gunzip извлекает сжатые файлы и удаляет файл .gz.

Чтобы сжать файл, в приглашении оболочки введите следующая команду:
gzip filename.ext
Файл будет сжат и сохранён под именем filename.ext.gz.

Чтобы развернуть сжатый файл введите:
gunzip filename.ext.gz
Файл filename.ext.gz при этом удаляется и заменяется файлом filename.ext.

Если вы обмениваетесь файлам с пользователям не Linux, вероятно лучше использовать zip, чтобы избежать проблем совместимости. Red Hat Linux может легко открыть zip или gzip файлы, но не Linux операционные системы могут не справиться с файлами gzip.

Чтобы сжать файл с помощью zip, введите:
zip -r filename.zip files

В этом примере filename определяет имя создаваемого файла, а files определяет какие файлы вы хотите включить в архив:
Чтобы извлечь содержимое файла zip, введите:
unzip filename.zip

Вы можете сжать с помощью zip или gzip сразу несколько файлов. Перечислите имена файлов, разделив их пробелами.
gzip filename.gz file1 file2 file3 /user/work/school 
Приведённая выше команда сожмёт file1, file2, file3 и содержимое каталога /user/work/school и поместит их в файл filename.gz.

Архивация с помощью Tar
Tar сохраняет несколько файлов или содержимое каталога или каталогов в одном файле. Это хороший способ создавать резервные копии и архивы. Обычно файлы, сделанные tar, имеют расширение .tar.

Чтобы создать файл tar, введите:
tar -cvf filename.tar files/directories
В этом примере filename.tar определяет имя создаваемого файла, а files/directories определяет какие файлы или каталоги вы хотите включить в новый архив.

Вы можете использовать абсолютные или относительные пути для этих файлов или каталогов (чтобы узнать больше о путях, обратитесь к разделу Смена каталогов с помощью cd в Главе 10). Разделите имена файлов и каталогов пробелами.
В показанном ниже примере показано создание файла с абсолютными путями:
	 tar -cvf foo.tar /home/mine/work /home/mine/school
      

Указанная выше команда поместит все файлы каталога /work и подкаталога /school в новый файл foo.tar в текущем рабочем каталоге.
Команда tar -cvf foo.tar file1.txt file2.txt file3.txt поместит файлы: file1.txt, file2.txt и file3.txt в новый файл foo.tar.

Чтобы просмотреть содержимое файла tar, введите:
	tar -tvf foo.tar

Чтобы извлечь содержимое файла tar, введите:
tar -xvf foo.tar

Эта команда не удаляет файл .tar, а извлекает содержимое .tar в текущий рабочий каталог.

Команда tar не автоматического выполняет сжатия файлов. Вы можете сжать файлы tar выполнив:
tar -czvf foo.tar

Сжатые файлы обычно имеют расширение .tgz и сжимаются при помощи gzip.

Чтобы развернуть сжатый файл tar введите:
tar -xzvf foo.tgz

параметр f должен быть указан именно на последнем месте среди набора параметров. То есть -xzvf верно -xzfv неверно
---------------------------------------------------------------------------------------------------------------------

Права:

Для файлов: r - право на чтение из файла; w - разрешает запись в файл (в частности перезапись или изменение); x - позволяет исполнить файл.
Для каталогов, флаги r w x имеют несколько отличный смысл: r - позволяет читать только имена файлов в каталоге; x - позволяет иметь доступ к самим файлам и их атрибутам (но не именам); w имеет смысл только в сочетании с x, и позволяет (в дополнение к x) манипулировать с файлами в каталоге (создавать, удалять и переименовывать). w без x - не имеет никакого эффекта. 

Какие должны стоять права на php скрипты?
Для обработки php кода интерпретатором на файлы с php скриптами должны стоять права на чтение для всех пользователей - 644 (с такими правами файлы содаются на сервере по умолчанию). Если какой-либо файл должен редактироваться другим php скриптом, нужно будет поставить права на редактирование пользователем веб-сервера - 666. Если скрипт создает файлы в какой-либо папке, на папку также нужно поставить права на запись для пользователя веб-сервера - 777.

Чтобы узнать имя текущего пользователя, используется команда:
whoami

Чтобы узнать в каких группах состоит текущий пользователь:
groups
	
Получить список всех пользоватей:
vipw

Получить список текущих пользователей:
users

Получить группы конкретного пользователя (вместо user_name ввести имя пользователя):
groups user_name

Для изменения владельца и группы файла или каталога есть команда chown:
sudo chown имя_нового_владельца:имя_новой_группы имя_файла_или_директории
	
Adding a user to a group:
sudo adduser user group

Removing a user from a group:
sudo deluser user group

После кипиша с группами и юзерами рестартим апач!

для изменения владельца: 
chown user:group file_or_directory

Чтобы всегда новые создаваевыемые данные в директоиии /var/www/vhosts получали указанные права 
setfacl -Rd -m g:www-data:rwx /var/www/vhosts

Для изменения прав доступа к файлу используется команда chmod. Ее можно использовать в двух вариантах. В первом варианте вы должны явно указать, кому какое право даете или кого этого права лишаете:
[user]$ chmod wXp имя-файла
 где вместо символа w подставляется
     u (т. е. пользователь, который является владельцем);
     g (группа);
     o (все пользователи, не входящие в группу, которой принадлежит данный файл);
     a (все пользователи системы, т. е. и владелец, и группа, и все остальные).

 Вместо X ставится:
     + (предоставляем право);
     – (лишаем соответствующего права);
     = (установить указанные права вместо имеющихся),

 Вместо p — символ, обозначающий соответствующее право:
    r (чтение);
    w (запись);
    x (выполнение);
Если опустить указание на то, кому предоставляется данное право, то подразумевается, что речь идет вообще о пользователе владельце (u)

Формат отображения прав:
drwxr-xr-x 2 users groups 4096 вер 13 07:31 directory
-rwxr-xr-x 2 users groups 4096 вер 13 07:31 file
users - имена владельцев файла или директории
groups - имена владельцев файла или директории

Показать правда для директории:
ls -l -d directory

Показать правда для содержимого директории:
ls -l directory

sudo apt update && sudo apt upgrade

---------------------------------------------------------------------------------------------------------------------

Отображение ошибок в браузере

1) файл php.ini
display_errors = on/off

2) .htaccess в проекте
php_value display_errors 0/1

3) в коде php скрипта
ini_set("display_errors", 0/1);

Приоритетность способов:
ini_set()=> .htaccess => php.ini
после правки рестартим апач

если вклюен Xdebug, то верный способ включить отображение ошибок - через .htaccess

Сортировка отображаемых ошибок по типам
error_reporting(0) : не отображает никаких ошибок
error_reporting(1) : Fatal error, Error
error_reporting(-1)) : Deprecated, Fatal error, Error, Notice, Warning
error_reporting('E_ALL') : Deprecated, Fatal error, Error, Notice, Warning 
отсутсвие error_reporting : Fatal error, Error, Notice

Пример Deprecated:
 -Non-static method A::func() should not be called statically 

Пример Notice:
 -Use of undefined constant asd - assumed 'asd' 
 -Пытаемся переопределить константу

Пример Warning:
 -Обьявили функцию с параметром, но в ее реализации не используем его
 -Подключаем отсутсвующий файл с помощью include.

Настройка апача AllowOverride None/All повлияет только если исправление вносится через .htaccess. ini_set() функция php и зависит от настроек самого php. 

еще одна из цитат
в конфигах сменил:
AllowOverride All на AllowOverride None
и ошибки появились, но... почему modrewrite конфликтует с выводом ошибок до сих пор не понятно...

---------------------------------------------------------------------------------------------------------------------

Xdebug

отключить Xdebug
sudo phpdismod xdebug(для php7)
sudo service apache2 restart

включить Xdebug
sudo phpenmod xdebug(для php7)
sudo service apache2 restart

если php 5 - то
sudo php5dismod xdebug
sudo php5enmod xdebug

php.ini для Xdebug
[xdebug]
xdebug.max_nesting_level=500
zend_extension="/usr/lib/php/20151012/xdebug.so"
xdebug.remote_autostart=on
xdebug.remote_enable=on
xdebug.remote_handler="dbgp"
xdebug.remote_host="localhost"
xdebug.remote_port=9001
xdebug.remote_mode=req
xdebug.idekey=PHPSTORM

---------------------------------------------------------------------------------------------------------------------

Apache2 и настройка виртуальных хостов

файл etc/apache2/sites-available/sitename.conf:
<Directory /var/www/html/test/>
    Require all granted
</Directory>
<VirtualHost 127.0.0.1:80>
    ServerName test.loc
    ServerAlias test.loc
    ServerAdmin webmaster@localhost
    DocumentRoot /var/www/html/test/    

    <Directory /var/www/html/test/>
        Options Indexes FollowSymLinks MultiViews
        AllowOverride All
    </Directory>

</VirtualHost>

файл etc/hosts
127.0.0.1	sitename.loc (.loc - не обязательно добавлять)

после всего этого в консоли:
sudo a2ensite sitename.conf
sudo service apache2 restart или sudo systemctl reload apache2

---------------------------------------------------------------------------------------------------------------------

Переключать активные версии можно командами:
Отключаем PHP 5.6
$ sudo a2dismod php5.6

Включаем PHP 7
$ sudo a2enmod php7.0

Перегружаем апач	
$ sudo service apache2 restart

http://gansik.ru/ubuntu/php-7-0-i-php-5-6-na-odnom-servere/

---------------------------------------------------------------------------------------------------------------------

.htaccess

https://www.proofsite.com.ua/article-2242.html

Файл .htaccess может быть размещён в любом каталоге. Директивы этого файла действуют на все файлы в текущем каталоге и во всех его подкаталогах (если эти директивы не переопределены директивами нижележащих файлов .htaccess).
Для того чтобы эти файлы .htaccess можно было использовать, необходимы соответствующие настройки главного конфигурационного файла (значение директивы AllowOverride должно быть установлено All). Как правило, подавляющее большинство хостеров разрешают использовать свои файлы .htaccess.

------------------------------------------------------------------------------------------------------------------------------------------------

PhpStorm

скачка
https://www.jetbrains.com/phpstorm//

установка
Once downloaded, open a terminal window and change your working directory to the download directory, then extract the .tar.gz file with this command:

tar xvf PhpStorm-2016.1.2.tar.gz
A new folder called PhpStorm-145.1616.3 will be created within the current working directory. It’s better to move this PhpStorm-145.1616.3 directory to /opt.
sudo mv PhpStorm-145.1616.3/ /opt/phpstorm/

Create a symlink
sudo ln -s /opt/phpstorm/bin/phpstorm.sh /usr/local/bin/phpstorm

Now type phpstorm in the terminal to launch the application.
phpstorm

Горячие клавиши
Ctrl+Shift+N - показать путь класса по его имени
Shift+Tab - массовый сдвиг влево
в PHPSTORM: пкм(где угодно в открытом проекте) -> Git -> Resolve Conflicts...
which phpstorm(или другйо исполняемый файл) - выдает полный путь к Шторму или другомй исполняемому файлу

------------------------------------------------------------------------------------------------------------------------------------------------

Глобальные переменные 
which php - укажет путь к php (/usr/bin/php)

------------------------------------------------------------------------------------------------------------------------------------------------

crontab
http://www.codenet.ru/webmast/php/cron.php
https://blog.amasty.com/configure-magento-cron-job/

чтобы скрыть ошибки во время работы крона 	 
sh
sh is the bourne shell. /usr/local/tomcat/bin/shutdown.sh is a shell script. sh file runs file as a shell script
Different shells use different syntax, so using the correct shell is a requirement. The first line of the shell should also define which to use: #!/bin/sh says use /bin/sh

К примеру, у нас есть такая строчка:
cron job command > /dev/null 2>&1



Перенаправление вывода
Оператор > («больше чем»), как в примере выше, переадресовывает вывод программы. В данном случае, что-то отправляется в /dev/null, а что-то переадресовывается в &1.
Стандартные ввод, вывод и ошибка
Существует три стандартных значения ввода и вывода для программ. Ввод получают от клавиатуры (интерактивная, диалоговая программа), или из программы, обрабатывающей вывод другой программы.
Результат программы обычно печатается в стандартной вывод и иногда в файл «STDERR» (ошибка). Все это три дескриптора файла (вы можете представить их как «потоки данных», пришли из языка программирования C), которые часто называют STDIN, STDOUT и STDERR.
Но часто к ним обращаются не по имени, а по номеру:
0 — STDIN, 1 — STDOUT и 2 — STDERR
По умолчанию, если вы не укажете номер, то будет подразумеваться STDOUT.
В нашем примере видно, что команда направляет свой стандартный вывод в /dev/null (псевдоустройство, которое может принять произвольный объём данных, не сохраняя их совершенно нигде, следовательно, подавив стандартный вывод). Затем все ошибки (то есть STDERR) перенаправить в стандартный вывод. Необходимо поставить амперсанд "&" перед номером назначения.
	Смысл вкратце — "весь вывод указанной команды спихнуть в черную дыру!".
Это один из способов сделать программу по-настоящему безмолвной. Добавлю, что команда в примере аналогична команде cron job command >/dev/null 2>/dev/null
















